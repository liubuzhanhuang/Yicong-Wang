package xdf;
import java.net.URL;
import java.awt.Font;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.Dimension;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowAdapter;
import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JDialog;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.JScrollPane;
import javax.swing.ImageIcon;
import javax.swing.ScrollPaneConstants;
import javax.swing.DefaultComboBoxModel;
import javax.swing.BorderFactory;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public class font extends JPanel {
 

private static ClassLoader loader;  
 private JList style;               
 private JList font;               
 private JList size;                
 private JList color;                
 private JColorChooser colorChooser; 
 private JDialog colorDialog;       
 private JScrollPane jsp1;           
 private JScrollPane jsp2;           
 private JScrollPane jsp3;          
 private JScrollPane jsp4;           
 private JTextField jtf1;            
 private JTextField jtf2;           
 private JTextField jtf3;            
 private JTextField jtf4;            
 private JTextField jtf5;            
 private JLabel jLabel1;            
 private JLabel jLabel2;             
 private JLabel jLabel3;            
 private JLabel jLabel4;           
 private JLabel jLabel5;             
 private JLabel jLabel6;             
 private JComboBox direction;        
 private JPanel jPanel2;            
 private JButton jButton;          
 
 public font() {
  setLayout(null);
  setPreferredSize(new Dimension(450, 375));
  initComponent();
 }
 
 private void initComponent() {
  
  loader = this.getClass().getClassLoader();
  
  jLabel1 = new JLabel("(F):");
  jLabel1.setBounds(20, 15, 80, 17);
  this.add(jLabel1);
  
  jtf1 = new JTextField("Fixedsys");
  jtf1.setBounds(20, 32, 150, 18);
  this.add(jtf1);
  
  style = new JList(getFontStyle());
  style.addListSelectionListener(new ListSelectionListener() {
   public void valueChanged(ListSelectionEvent e) {
    jtf1.setText(style.getSelectedValue().toString());
    jLabel6.setFont(new Font(jtf1.getText(), getCharFont(jtf2.getText()), Integer.parseInt(jtf3.getText())));
   }
  });
  jsp1 = new JScrollPane(style);
  jsp1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  jsp1.setBounds(20, 50, 150, 140);
  this.add(jsp1);
  
  jLabel2 = new JLabel("(Y):");
  jLabel2.setBounds(180, 15, 80, 17);
  this.add(jLabel2);
  
  jtf2 = new JTextField("Normal");
  jtf2.setBounds(180, 32, 110, 18);
  this.add(jtf2);
  
  font = new JList(getCharFont());
  font.addListSelectionListener(new ListSelectionListener() {
   public void valueChanged(ListSelectionEvent e) {
    jtf2.setText(font.getSelectedValue().toString());
    jLabel6.setFont(new Font(jtf1.getText(), getCharFont(jtf2.getText()), Integer.parseInt(jtf3.getText())));
   }
  });
  jsp2 = new JScrollPane(font);
  jsp2.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  jsp2.setBounds(180, 50, 110, 140);
  this.add(jsp2);
  
  jLabel3 = new JLabel("(S):");
  jLabel3.setBounds(300, 15, 50, 17);
  this.add(jLabel3);
  
  jtf3 = new JTextField("12");
  jtf3.setBounds(300, 32, 50, 18);
  this.add(jtf3);
  
  size = new JList(getCharSize());
  size.addListSelectionListener(new ListSelectionListener() {
   public void valueChanged(ListSelectionEvent e) {
    jtf3.setText(size.getSelectedValue().toString());
    jLabel6.setFont(new Font(jtf1.getText(), getCharFont(jtf2.getText()), Integer.parseInt(jtf3.getText())));
   }
  });
  jsp3 = new JScrollPane(size);
  jsp3.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  jsp3.setBounds(300, 50, 50, 140);
  this.add(jsp3); 
  
  jLabel5 = new JLabel("Color(C)");
  jLabel5.setBounds(20, 210, 70, 17);
  this.add(jLabel5);
  
  jtf4 = new JTextField("black");
  jtf4.setBounds(20, 227, 150, 18);
  this.add(jtf4);
  
  colorChooser = new JColorChooser();
  colorDialog = JColorChooser.createDialog(
   this,
   "colorChooser",
   false,
   colorChooser,
   new ActionListener() {
    public void actionPerformed(ActionEvent e) {
     jLabel6.setForeground(colorChooser.getColor());
    }
   },
   new ActionListener() {
    public void actionPerformed(ActionEvent e) {
     colorDialog.setVisible(false);
    }
   });
  color = new JList(getColor());
  color.addListSelectionListener(new ListSelectionListener() {
   public void valueChanged(ListSelectionEvent e) {
    if(color.getSelectedIndex() != 5) {  
     jtf4.setText(color.getSelectedValue().toString());
     jLabel6.setForeground(getColor(jtf4.getText()));
     return ;
    }
    colorDialog.setVisible(true);
   }
  });
  jsp4 = new JScrollPane(color);
  jsp4.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  jsp4.setBounds(20, 245, 150, 65);
  this.add(jsp4);
  jPanel2 = new JPanel();
  jPanel2.setLayout(null);
  jPanel2.setBorder(BorderFactory.createTitledBorder("example"));
  jPanel2.setBounds(180, 210, 170, 120);
  this.add(jPanel2);
  jLabel6 = new JLabel("<html>test");
  jLabel6.setHorizontalAlignment(SwingConstants.CENTER);
  jLabel6.setBounds(5, 15, 160, 90);
  jPanel2.add(jLabel6);
  jtf5 = new JTextField();
  jtf5.setBounds(181, 330, 90, 20);
  this.add(jtf5);
  
  jButton = new JButton("input");
  jButton.addActionListener(new ActionListener() {
   public void actionPerformed(ActionEvent e) {
    if(jtf5.getText().equals("")) {
     return ;
    }
    jLabel6.setText("<html>"+jtf5.getText()); 
                                              
   }
  });
  jButton.setBounds(270, 330, 80, 20);
  this.add(jButton);
 }
 
 
 public String[] getFontStyle() {
  
  Font[] systemFont = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();
  String[] systemFontString = new String[systemFont.length];
  for(int i=0; i<systemFontString.length; i++) {
   systemFontString[i] = systemFont[i].getName();
  }
  
  return systemFontString;
 }
 
 
 public String[] getCharFont() {
  
  String[] font = {"plain", "bold", "italic", "else"};
  return font;
 }
 
 public int getCharFont(String str) {
  
  if(str.equals("plain")) {
   return Font.PLAIN;
  }
  else if(str.equals("bold")) {
   return Font.BOLD;
  }
  else if(str.equals("italic")){
   return Font.ITALIC;
  }
  else {
   return Font.ITALIC + Font.BOLD;
  }
 }
 
 
 public String[] getCharSize() {
  
  String[] size = new String[70];
  for(int i=0; i<size.length; i++) {
   size[i] = Integer.toString(i+8);
  }
  return size;
 }
 
   
 public String[] getColor() {
  
  String[] color = {"black", "red", "blue", "yellow", "green", "user-defined"};
  return color;
 }
 
 public Color getColor(String str) {
  
  if(str.equals("black")) {
   return Color.BLACK;
  }
  else if(str.equals("red")) {
   return Color.RED;
  }
  else if(str.equals("blue")) {
   return Color.BLUE;
  }
  else if(str.equals("yellow")) {
   return Color.YELLOW;
  }
  else {
   return Color.GREEN;
  }
 }
 
 public static void main(String[] args) {
  
  font fsDialog = new font();
       JFrame jf = new JFrame();
       URL iconURL = loader.getResource("font/pic/icon.png");
       if (iconURL != null) {
           ImageIcon icon = new ImageIcon(iconURL);
           jf.setIconImage(icon.getImage());
       }
       
       jf.addWindowListener(new WindowAdapter() {
           public void windowClosing(WindowEvent e) {
            System.exit(0);
           }
       });
       jf.getContentPane().add(fsDialog);
       jf.setResizable(false);
       jf.setSize(450, 375);
       jf.setTitle("font");
       jf.pack();
       Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
  Dimension frameSize = jf.getSize();
  jf.setLocation(
   (screenSize.width - frameSize.width) / 2,
   (screenSize.height - frameSize.height) / 2
   );
       jf.setVisible(true);
      
   }
 }
